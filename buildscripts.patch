diff --git a/patches/binutils.patch b/patches/binutils.patch
index 6890b9e..f2d5971 100644
--- a/patches/binutils.patch
+++ b/patches/binutils.patch
@@ -11,3 +11,14 @@ diff -ru a/src/binutils/ld/scripttempl/elf.sc b/src/binutils/ld/scripttempl/elf.
    /* Exception handling  */
    .eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }
    .gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
+diff -ru binutils-2.30.orig/bfd/elf32-arm.c binutils-2.30/bfd/elf32-arm.c
+--- binutils-2.30.orig/src/binutils/bfd/elf32-arm.c	2018-10-30 19:49:48.763958018 +0100
++++ binutils-2.30/src/binutils/bfd/elf32-arm.c	2018-10-30 19:50:11.816216355 +0100
+@@ -12816,6 +12816,7 @@
+ 	  else
+ 	    unwind_type = 2;
+ 
++          elide = 0;
+ 	  if (elide && !bfd_link_relocatable (info))
+ 	    {
+ 	      add_unwind_table_edit (&unwind_edit_head, &unwind_edit_tail,
diff --git a/patches/gcc-6.patch b/patches/gcc-6.patch
index ab47d75..1f34628 100644
--- a/patches/gcc-6.patch
+++ b/patches/gcc-6.patch
@@ -24,3 +24,69 @@ diff -ru a/src/gcc/gcc/gcc.c b/src/gcc/gcc/gcc.c
  #endif
  
  /* When using -fsplit-stack we need to wrap pthread_create, in order
+diff -ru a/src/gcc/gcc/config/arm/arm.h b/src/gcc/gcc/config/arm/arm.h
+--- a/src/gcc/gcc/config/arm/arm.h     2018-01-08 19:42:50.166542000 +0100
++++ b/src/gcc/gcc/config/arm/arm.h     2018-04-07 08:02:39.623554490 +0200
+@@ -29,6 +29,10 @@
+ #ifndef GCC_ARM_H
+ #define GCC_ARM_H
+ 
++#ifndef NO_IMPLICIT_EXTERN_C
++#define NO_IMPLICIT_EXTERN_C
++#endif
++
+ /* We can't use machine_mode inside a generator file because it
+    hasn't been created yet; we shouldn't be using any code that
+    needs the real definition though, so this ought to be safe.  */
+diff --git a/src/gcc/gcc/cp/decl2.c b/src/gcc/gcc/cp/decl2.c
+--- a/src/gcc/gcc/cp/decl2.c
++++ b/src/gcc/gcc/cp/decl2.c
+@@ -1829,10 +1829,13 @@ vague_linkage_p (tree decl)
+ {
+   if (!TREE_PUBLIC (decl))
+     {
+-      /* maybe_thunk_body clears TREE_PUBLIC on the maybe-in-charge 'tor
+-	 variants, check one of the "clones" for the real linkage.  */
++      /* maybe_thunk_body clears TREE_PUBLIC and DECL_ABSTRACT_P on the
++	 maybe-in-charge 'tor variants; in that case we need to check one of
++	 the "clones" for the real linkage.  But only in that case; before
++	 maybe_clone_body we haven't yet copied the linkage to the clones.  */
+       if ((DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (decl)
+ 	   || DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl))
++	  && !DECL_ABSTRACT_P (decl)
+ 	  && DECL_CHAIN (decl)
+ 	  && DECL_CLONED_FUNCTION (DECL_CHAIN (decl)))
+ 	return vague_linkage_p (DECL_CHAIN (decl));
+@@ -2310,11 +2313,8 @@ determine_visibility (tree decl)
+ 	    }
+ 
+ 	  /* Local classes in templates have CLASSTYPE_USE_TEMPLATE set,
+-	     but have no TEMPLATE_INFO.  Their containing template
+-	     function does, and the local class could be constrained
+-	     by that.  */
+-	  if (template_decl)
+-	    template_decl = fn;
++	     but have no TEMPLATE_INFO, so don't try to check it.  */
++	  template_decl = NULL_TREE;
+ 	}
+       else if (VAR_P (decl) && DECL_TINFO_P (decl)
+ 	       && flag_visibility_ms_compat)
+diff --git a/src/gcc/gcc/testsuite/g++.dg/ext/visibility/lambda1.C b/src/gcc/gcc/testsuite/g++.dg/ext/visibility/lambda1.C
+new file mode 100644
+--- /dev/null
++++ b/src/gcc/gcc/testsuite/g++.dg/ext/visibility/lambda1.C
+@@ -0,0 +1,14 @@
++// PR c++/85646
++// { dg-do compile { target c++11 } }
++// { dg-additional-options -fvisibility=hidden }
++
++template<typename T>
++void foo() {
++    struct inner {
++        inner() {
++            (void)([this] { });
++        }
++    };
++}
++
++int main() { foo<int>(); }
